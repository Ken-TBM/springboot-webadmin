定制化原理
1、定制化的常见方式
    修改配置文件：
    xxxCustomizer:
    编写自定义的配置类 xxxConfiguration;+ @Bean替换、增加容器中默认组件、视图解析器
    web应用 实现 WebMvcConfigurer即可定制化web功能；+@Bean给容器中再扩展一些组件

    @Configuration
    public class AdminWebConfig implements WebMvcConfigurer {}

     @EnableMvc+WebMvcConfigurer----@Bean 可以全面接管SpringMVC，所有规则全部自己重新配置；实现
     定制和扩展功能
     原理
       1、WebMvcAutoConfiguration默认的SpringMVC的自动配置类，静态资源，欢迎页面
       2、一旦使用@EnableWebMvc、 会@import（DelegatingWebMvcConfiguration.class）
       3、DelegatingWebConfiguration的作用，只保证SpringMvc最基本的使用
            1.把所有系统中的WebMvcConfigurer拿过来，所有功能的定制都是这些WebMvcConfigurer合起来
            生效的
            2.自动配置一些非常底层的组件。RequestMappingHandlerMapping.这些组件依赖的组件都是从容器
            中获取
            3.public class DelegatingWebConfiguration extends webMvcConfigurationSupport
            4.WebMvcAutoConfiguration里面的配置要能生效必须
                @ConditionalOnMissingBean(WebMvcConfigurationSupport.class)
            5.@EnableWebMvc 导致了WebMvcAutoConfiguration 没有生效



2、原理分析套路
    场景starter
    -xxxAutoConfiguration -导入xxx组件 -绑定xxxProperties
    --绑定配置文件项